{"version":3,"file":"validator.js","sourceRoot":"","sources":["validator.ts"],"names":[],"mappings":"AAAA,kDAAkD;AAClD,iCAAiC;AACjC,0EAA0E;AAoC1E,kCAAkC;AAClC,CAAC;IAEC,MAAM,OAAO,GAAG,EAA4C,CAAA;AAI9D,CAAC;AAQD,oCAAoC;AACpC,CAAC;IAEC,MAAM,OAAO,GAAG,EAA8C,CAAA;AAIhE,CAAC","sourcesContent":["// This file is generated automatically by Next.js\n// Do not edit this file manually\n// This file validates that all pages and layouts export the correct types\n\nimport type { AppRoutes, LayoutRoutes, ParamMap } from \"./routes.js\"\nimport type { ResolvingMetadata, ResolvingViewport } from \"next/types.js\"\n\ntype AppPageConfig<Route extends AppRoutes = AppRoutes> = {\n  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)\n  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]\n  generateMetadata?: (\n    props: { params: Promise<ParamMap[Route]> } & any,\n    parent: ResolvingMetadata\n  ) => Promise<any> | any\n  generateViewport?: (\n    props: { params: Promise<ParamMap[Route]> } & any,\n    parent: ResolvingViewport\n  ) => Promise<any> | any\n  metadata?: any\n  viewport?: any\n}\n\ntype LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {\n  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)\n  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]\n  generateMetadata?: (\n    props: { params: Promise<ParamMap[Route]> } & any,\n    parent: ResolvingMetadata\n  ) => Promise<any> | any\n  generateViewport?: (\n    props: { params: Promise<ParamMap[Route]> } & any,\n    parent: ResolvingViewport\n  ) => Promise<any> | any\n  metadata?: any\n  viewport?: any\n}\n\n\n// Validate ../../src/app/page.tsx\n{\n  type __IsExpected<Specific extends AppPageConfig<\"/\">> = Specific\n  const handler = {} as typeof import(\"../../src/app/page.js\")\n  type __Check = __IsExpected<typeof handler>\n  // @ts-ignore\n  type __Unused = __Check\n}\n\n\n\n\n\n\n\n// Validate ../../src/app/layout.tsx\n{\n  type __IsExpected<Specific extends LayoutConfig<\"/\">> = Specific\n  const handler = {} as typeof import(\"../../src/app/layout.js\")\n  type __Check = __IsExpected<typeof handler>\n  // @ts-ignore\n  type __Unused = __Check\n}\n"]}