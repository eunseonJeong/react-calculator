{"version":3,"file":"calculator.js","sourceRoot":"","sources":["calculator.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,UAAkB,EAClB,WAAmB,EACnB,SAA8B,EACtB,EAAE;IACV,QAAQ,SAAS,EAAE,CAAC;QAClB,KAAK,GAAG;YACN,OAAO,UAAU,GAAG,WAAW,CAAC;QAClC,KAAK,GAAG;YACN,OAAO,UAAU,GAAG,WAAW,CAAC;QAClC,KAAK,GAAG;YACN,OAAO,UAAU,GAAG,WAAW,CAAC;QAClC,KAAK,GAAG;YACN,IAAI,WAAW,KAAK,CAAC,EAAE,CAAC;gBACtB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtC,CAAC;YACD,OAAO,UAAU,GAAG,WAAW,CAAC;QAClC;YACE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACzC,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,KAAa,EAAU,EAAE;IACrD,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QACnD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,iCAAiC;IACjC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACpC,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC1C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAa,EAAgC,EAAE;IACzE,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC9D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,KAAa,EAAW,EAAE;IACjD,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAa,EAAW,EAAE;IACvD,OAAO,KAAK,KAAK,GAAG,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import { CalculatorState, CalculatorOperation } from './types';\r\n\r\nexport const calculate = (\r\n  firstValue: number,\r\n  secondValue: number,\r\n  operation: CalculatorOperation\r\n): number => {\r\n  switch (operation) {\r\n    case '+':\r\n      return firstValue + secondValue;\r\n    case '-':\r\n      return firstValue - secondValue;\r\n    case '*':\r\n      return firstValue * secondValue;\r\n    case '/':\r\n      if (secondValue === 0) {\r\n        throw new Error('Division by zero');\r\n      }\r\n      return firstValue / secondValue;\r\n    default:\r\n      throw new Error('Unknown operation');\r\n  }\r\n};\r\n\r\nexport const formatDisplay = (value: number): string => {\r\n  if (Number.isNaN(value) || !Number.isFinite(value)) {\r\n    return 'Error';\r\n  }\r\n  \r\n  // 소수점 이하 10자리까지 표시하되, 불필요한 0은 제거\r\n  const formatted = value.toFixed(10);\r\n  return parseFloat(formatted).toString();\r\n};\r\n\r\nexport const isOperation = (value: string): value is CalculatorOperation => {\r\n  return ['+', '-', '*', '/', '=', 'C', 'CE'].includes(value);\r\n};\r\n\r\nexport const isNumber = (value: string): boolean => {\r\n  return /^\\d+$/.test(value);\r\n};\r\n\r\nexport const isDecimalPoint = (value: string): boolean => {\r\n  return value === '.';\r\n};\r\n"]}